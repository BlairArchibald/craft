#!/usr/bin/ruby

def prettify (x)
    shift = 0
    while x > 100.0 do
        x /= 10.0
        shift += 1
    end
    x = x.round.to_i
    while shift > 0 do
        x *= 10
        shift -= 1
    end
    return x
end

def prettify_flops (x)
    if x < 1000.0 then
        return sprintf("%.2f FLIPS", x)
    else
        x /= 1000.0
        if x < 1000.0 then
            return sprintf("%.2f MFLIPS", x)
        else
            x /= 1000.0
            if x < 1000.0 then
                return sprintf("%.2f GFLIPS", x)
            else
                x /= 1000.0
                return sprintf("%.2f TFLIPS", x)
            end
        end
    end
end

class Trial
    attr_accessor :realtime
    attr_accessor :overhead
    def to_s
        return "#{realtime}  #{prettify(overhead)}X"
    end
end

#num_insts = 0
if ARGV.size > 1 then
    fname = ARGV[0]
    #num_insts = ARGV[1].to_i
end

trials = Hash.new { |k,v| Array.new }
headers = Array.new
num_insts = Hash.new(0)
skip_next_original = true

header = ""
baseline = 0
baseline_flops = 0

puts "\n"
#ARGF.each_line do |line|
#while line = gets
IO.foreach(fname) do |line|

    if line =~ /^== (.*) ==$/ then

        header = $1

    elsif line =~ /^real\s+(.+)m(.+)s$/ then

        realtime = $1.to_f * 60.0 + $2.to_f
        if header =~ /ORIGINAL/ then
            if skip_next_original then
                skip_next_original = false
                next
            end
        end

        #overhead = realtime / baseline

        t = Trial.new
        t.realtime = realtime
        #t.overhead = overhead
        trials[header] = trials[header] << t

        headers << header if not headers.include?(header)

    #elsif line =~ /^Full analysis: (\d+) instruction\(s\) handled$/ then
        #num_insts[header] += $1.to_i
    #elsif line =~ /^Optimized analysis: (\d+) instruction\(s\) handled$/ then
        #num_insts[header] += $1.to_i

    end
end

headers.each do |h|
    n_trials = 0
    avg_realtime = 0.0
    #avg_overhead = 0.0
    trials[h].each do |t|
        n_trials += 1
        avg_realtime += t.realtime
        #avg_overhead += t.overhead
    end
    if n_trials > 0 then
        avg_realtime /= n_trials.to_f
        #avg_overhead /= n_trials.to_f
        if h =~ /ORIGINAL/ then
            baseline = avg_realtime
            baseline_flops = num_insts[h] / baseline
        end

        #puts "#{baseline}"
        overhead = avg_realtime / baseline
        if (num_insts[h] > 0) then
            flops = num_insts[h] / avg_realtime
            overhead_flops = baseline_flops / flops
            #puts "#{avg_realtime} #{overhead}"
            #printf("%30s %8.3fs  (%dX)   [avg of %d trial(s)]\n", h, avg_realtime, prettify(overhead), n_trials)
            ostr = sprintf("(%dX)", prettify(overhead))
            fostr = sprintf("(%dX)", prettify(overhead_flops))
            printf("%30s %8.3fs  %7s  %15s  %7s   [avg of %d trial(s)]\n", 
                   h, avg_realtime, ostr, prettify_flops(flops), fostr, n_trials)
        else
            printf("%30s %8.3fs  (%dX)   [avg of %d trial(s)]\n", h, avg_realtime, prettify(overhead), n_trials)
        end
    end
end

