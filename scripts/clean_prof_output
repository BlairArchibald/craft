#!/usr/bin/ruby

$I_HEADER_FMT = "%8s   %-55s %-45s %-30s %-16s   %-16s  \n"
$I_ENTRY_FMT  = "%8.1f   %-55s %-45s %-30s 0x%-16x 0x%-16x\n"

$LN_HEADER_FMT = "%8s    %-45s\n"
$LN_ENTRY_FMT  = "%8.1f    %-45s\n"

$F_HEADER_FMT = "%8s    %-55s\n"
$F_ENTRY_FMT  = "%8.1f    %-55s\n"

$M_HEADER_FMT = "%8s    %-55s\n"
$M_ENTRY_FMT  = "%8.1f    %-55s\n"

$C_HEADER_FMT = "%8s    %-55s\n"
$C_ENTRY_FMT  = "%8.1f    %-55s\n"

def read_prof (fname)
    # store address counts in hash table
    prof_counts = Hash.new(0)
    fin = File.open(fname)
    fin.each do |line|
        if (line =~ /SIGPROF RIP=([\dxabcdefABCDEF]+)/) then
            rip = $1
            prof_counts[rip.downcase] += 1
            $total_counts += 1
        end
    end
    fin.close
    return prof_counts
end

def read_pmap (fname)
    modules = Array.new
    fin = File.open(ARGV[1])
    fin.each do |line|
        if line =~ /^([\dxabcdefABCDEF]+) \s*\d+K ..... \s*(?:.*\/)*(.*)$/ then
            addr = $1.hex
            name = $2
            modules << [addr, name]
        end
    end
    fin.close
    return modules
end

def do_aggregation
    # sort and aggregate instructions
    #printf($I_HEADER_FMT, "% EXEC", "FUNCTION", "SOURCE", "MODULE", "ADDRESS", "OFFSET")
    i_count_array = $i_counts.to_a.sort { |a,b| a[1] <=> b[1] }
    idx = 1
    libfiles = Hash.new
    i_count_array.each do |key, value|
        STDERR.puts "handling instruction: #{idx} / #{i_count_array.size}"
        idx += 1

        func = ""
        lineno = ""
        libname = ""
        offset = ""

        # find corresponding memory region
        addr = key.hex
        i = 0
        while i < $pmap.size-1 && addr > $pmap[i+1][0] do
            i += 1
        end

        # find debug info if available
        if i < $pmap.size then
            libname = $pmap[i][1]
            if libname =~ /\.so/ then
                offset = "0x%x" % (addr - $pmap[i][0])
            else
                offset = "0x%x" % addr
            end
            if not libfiles.has_key?(libname) then
                # search for the library
                $ldpath.each do |path|
                    if File.exists?("#{path}/#{libname}") then
                        libfiles[libname] = "#{path}/#{libname}"
                        break
                    end
                end
            end
            if libfiles.has_key?(libname) then
                a2l = `addr2line -i -f -C -e #{libfiles[libname]} #{offset}`.split("\n")
                if a2l.size > 1 then
                    # extract function name and line number
                    if a2l[0].strip.length > 0 && a2l[0].strip != '??' then
                        func = a2l[0].strip
                    end
                    if a2l[1].strip != '??:0' && a2l[1].strip =~ /^(?:.*\/)*([^\/]*)/ then
                        lineno = $1.strip
                    end
                end
            else
                puts "ERROR: couldn't find #{libname}"
            end
        end

        # update line number counts
        if lineno != "" then
            $ln_counts[lineno] += value
            #puts "  increasing line number #{lineno} by #{value}"
        end

        # update function counts
        if func != "" then
            $f_counts[func] += value
            #puts "  increasing function #{func} by #{value}"
        end

        # update module counts
        if libname != "" then
            $m_counts[libname] += value
            #puts "  increasing module #{libname} by #{value}"
        end

        # update component counts
        if func =~ /^GC_/ then
            $c_counts["Garbage collector"] += value
        end
        if func =~ /^FPInst::/ || key =~ /_INST_/ then
            $c_counts["FPAnalysis code"] += value
        end
        if libname =~ /libinstructionAPI/ || libname =~ /libparseAPI/ || libname =~ /libsymtabAPI/ ||
            libname =~ /libcommon/ || libname =~ /libdyninstAPI/ || libname =~ /libstackwalkAPI/ then
            $c_counts["Dyninst component"] += value
        end

        # output entry
        #percentage = (value.to_f / $total_counts.to_f) * 100.0
        #if func.length > 50 then
            #func = func[0,50]
        #end
        #printf($I_ENTRY_FMT, percentage, func, lineno, libname, addr, offset)

    end
end

def find_file (fname)
    filename = nil
    $srcpath.each do |path|
        filter = "#{path}/**/#{fname}"
        Dir.glob(filter) do |fn|
            filename = fn
            break
        end
        if filename != nil then
            break
        end
    end
    return filename
end

def get_src_line (lineno)
    parts = lineno.split(":")
    src_line = ""
    if parts.size == 2 then
        fname = parts[0]
        line = parts[1].to_i
        if $srcfiles.has_key?(fname) then
            fullpath = $srcfiles[fname]
        else
            fullpath = find_file(fname)
        end
        if fullpath != nil then
            $srcfiles[fname] = fullpath
            lno = 1
            added = 0
            fin = File.open(fullpath)
            fin.each do |text|
                if lno >= line-5 && lno <= line+5 then
                    if added > 0 then
                        src_line += "\n"
                    end
                    if lno == line then
                        src_line += ">>>>    #{text.chomp}"
                    else
                        src_line += "        #{text.chomp}"
                    end
                    added += 1
                end
                if lno > line+5 then
                    break
                end
                lno += 1
            end
            fin.close
        end
    end
    return src_line
end

def output_line_numbers
    # sort and output line number counts
    printf("\n")
    printf($LN_HEADER_FMT, "% EXEC", "LINE NUMBER")
    idx = 1
    outcount = -1
    ln_count_array = $ln_counts.to_a.sort { |a,b| a[1] <=> b[1] }
    ln_count_array.each do |key, value|
        percentage = (value.to_f / $total_counts.to_f) * 100.0
        if percentage >= 0.01 then
            if outcount == -1 then
                outcount = ln_count_array.size - idx + 1
                idx = 1
            end
            STDERR.puts "handling line number: #{idx} / #{outcount}"
            if key.length > 120 then
                key = key[0,120]
            end
            printf($LN_ENTRY_FMT, percentage, key)
            puts
            puts get_src_line(key)
            puts
        end
        idx += 1
    end
end

def output_functions
    # sort and output function counts
    printf("\n")
    printf($F_HEADER_FMT, "% EXEC", "FUNCTION")
    f_count_array = $f_counts.to_a.sort { |a,b| a[1] <=> b[1] }
    f_count_array.each do |key, value|
        percentage = (value.to_f / $total_counts.to_f) * 100.0
        if percentage >= 0.1 then
            if key.length > 120 then
                key = key[0,120]
            end
            printf($F_ENTRY_FMT, percentage, key)
        end
    end
end

def output_modules
    # sort and output module counts
    printf("\n")
    printf($M_HEADER_FMT, "% EXEC", "MODULE")
    total_pct = 0.0
    m_count_array = $m_counts.to_a.sort { |a,b| a[1] <=> b[1] }
    m_count_array.each do |key, value|
        percentage = (value.to_f / $total_counts.to_f) * 100.0
        total_pct += percentage
        if key.length > 120 then
            key = key[0,120]
        end
        printf($M_ENTRY_FMT, percentage, key)
    end
    printf($M_ENTRY_FMT, 100.0-total_pct, "Other (original program + false negatives)")
end

def output_components
    # sort and output component counts
    printf("\n")
    printf($C_HEADER_FMT, "% EXEC", "COMPONENT")
    total_pct = 0.0
    c_count_array = $c_counts.to_a.sort { |a,b| a[1] <=> b[1] }
    c_count_array.each do |key, value|
        percentage = (value.to_f / $total_counts.to_f) * 100.0
        total_pct += percentage
        if key.length > 120 then
            key = key[0,120]
        end
        printf($C_ENTRY_FMT, percentage, key)
    end
    printf($C_ENTRY_FMT, 100.0-total_pct, "Other (original program + false negatives)")
end




# read sigprof info from debug dump
$total_counts = 0
$i_counts = read_prof(ARGV[0])

# read memory region information from pmap output
if ARGV.size > 1 then
    $pmap = read_pmap(ARGV[1])
else
    $pmap = Array.new
end

# initialize library file lookup table
$ldpath = `echo $LD_LIBRARY_PATH`.split(":")
$ldpath << "/lib64/"
$ldpath << "/usr/lib64/"
(2..(ARGV.size-1)).each do |i|
    path = ARGV[i].strip
    $ldpath << path if not $ldpath.include?(path)
end

# initialize source code lookup table
$srcpath = Array.new
$srcpath << Dir.pwd
$srcpath << '/fs/dyninst/lam/git-fpstable/dyninst'
$srcpath << '/fs/dyninst/lam/git-fpstable/fpanalysis'
$srcpath << '/fs/dyninst/utils/machines/rhel5-x86_64/64'
$ldpath.each do |path|
    $srcpath << path if not $srcpath.include?(path)
end
$srcfiles = Hash.new

# initialize line number and function tables
$ln_counts = Hash.new(0)
$f_counts = Hash.new(0)
$m_counts = Hash.new(0)
$c_counts = Hash.new(0)

do_aggregation

output_line_numbers
output_functions
output_modules
output_components

