#!/bin/bash
#
# Floating-point profiler test script
#
# Mike Lam, UMD (September '09)
#

#######################################
###            MUTATEES             ###
#######################################

#alltests="1 2 3 4 10 20 30 40 50 51 52"
#alltests="1 2 10 20 30 40 50"
alltests="1 2 3 4 10 11 20 60 61"

# {{{ test configurations

tag[1]=fptest1
target[1]=tests/fptest1
config[60]="-C \"min_priority=1\""

tag[2]=fptest7
target[2]=tests/fptest7

tag[3]=canceltest
target[3]=tests/canceltest

tag[4]=packed_sse
target[4]=tests/packed_sse
config[4]="-C \"report:*add_s=4\" -C \"report:*add_d=2\""

tag[10]=quadroot
target[10]=tests/quadroot
params[10]="1 2 1"
insts[10]=42

tag[11]=inf_sum
target[11]=tests/inf_sum
params[11]=50000
insts[11]=1299994

tag[20]=sum0001
target[20]=tests/sum0001
insts[20]=80080004

tag[30]=matmult
target[30]=tests/matmult
params[30]="-p 2500 2500"
insts[30]=118782516

tag[40]=quake
target[40]=tests/quake
input[40]=tests/quake.in.short
hasinput[40]=yes
insts[40]=365247700

tag[50]=whetstone15000
target[50]=tests/whetstone
params[50]=15000
insts[50]=525900058

tag[51]=whetstone50000
target[51]=tests/whetstone
params[51]=50000
insts[51]=1753000058

tag[52]=whetstone200000
target[52]=tests/whetstone
params[52]=200000
insts[52]=1

tag[60]=gauss10
target[60]=tests/gauss/gauss
params[60]=tests/gauss/jun2_rand_10x10.txt
#config[60]="-C \"min_priority=1\" -C \"report:*mat=10 10\""
config[60]="-C \"min_priority=1\""
insts[60]=1

tag[61]=gauss50
target[61]=tests/gauss/gauss
params[61]=tests/gauss/jun2_rand_50x50.txt
config[61]="-C \"min_priority=1\" -C \"report:*mat=50 50\""
insts[61]=1

if [ $# -gt 0 ]; then
    alltests="$*"
fi

# }}}


#######################################
###             ANALYSES            ###
#######################################

do_nullinst=no
do_nullanalysis=no
do_cinst=yes
do_cancel=yes
do_cancelstwalk=no
do_nullshadow=no
do_arprec=no
do_quad=yes
do_single=no
do_nullptr=no
do_ptrquad=yes
do_ptrsingle=yes


#######################################
###             OPTIONS             ###
#######################################

ntrials=1

fprofopts="-r -C \"min_priority=1\""


#######################################
###         MAIN TEST SCRIPT        ###
#######################################

# print header
echo -e "\n---===###                                            ###===---"
echo -e "---===###  FLOATING POINT INSTRUMENTATION TRIAL RUN  ###===---"
echo -e "---===###                                            ###===---"
echo -e "                 `date`"

# ensure profiler build is up-to-date
echo -e "\nBuilding fpinst ..."
#make clean
if ! make -s; then
    echo "Build failed!"
    exit 1
fi

# {{{ dump parameters to output
echo -e "\nEnabled tests:"
for t in $alltests
do
    echo "  - ${tag[$t]}"
done
echo -e "\nEnabled analysis modes:"
echo -e "  - ORIGINAL"
if [ $do_nullinst == "yes" ]; then
    echo "  - NULL INSTRUMENTATION"
fi
if [ $do_nullanalysis == "yes" ]; then
    echo "  - NULL ANALYSIS"
fi
if [ $do_cinst == "yes" ]; then
    echo "  - INST COUNT"
fi
if [ $do_cancel == "yes" ]; then
    echo "  - CANCEL"
fi
if [ $do_cancelstwalk == "yes" ]; then
    echo "  - CANCEL W/ STWALK"
fi
if [ $do_nullshadow == "yes" ]; then
    echo "  - NULL SHADOW ANALYSIS"
fi
if [ $do_arprec == "yes" ]; then
    echo "  - ARPREC SHADOW"
fi
if [ $do_quad == "yes" ]; then
    echo "  - QUAD SHADOW"
fi
if [ $do_single == "yes" ]; then
    echo "  - SINGLE SHADOW"
fi
if [ $do_nullptr == "yes" ]; then
    echo "  - NULL POINTER ANALYSIS"
fi
if [ $do_ptrquad == "yes" ]; then
    echo "  - QUAD POINTER"
fi
if [ $do_ptrsingle == "yes" ]; then
    echo "  - SINGLE POINTER"
fi
# }}}

# start running trials
for t in $alltests
do
    echo -e "\n\n\n===== [[  ${tag[$t]}  ]] ====="

    # clean out old files
    #rm -f *.log out mutant

    # redirect standard error (used to gather performance data)
    exec 2>out

    # {{{ run original program 
    # (do this ntrials+1 times; we throw out 
    # the first time b/c of OS caching effects)
    otrials=$((ntrials+1))
    for i in $(seq $otrials)
    do
        echo -e "\n== ORIGINAL =="
        echo -e "\n== ORIGINAL ==" >&2
        if [ "${hasinput[$t]}" == yes ]; then
            echo "${target[$t]} ${params[$t]} <${input[$t]}"
            time ${target[$t]} ${params[$t]} <${input[$t]}
        else
            time ${target[$t]} ${params[$t]}
        fi
    done
    # }}}

    # {{{ null instrumentation (pure Dyninst overhead)
    if [ "$do_nullinst" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --null ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== NULL INSTRUMENTATION =="
            echo -e "\n== NULL INSTRUMENTATION ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/null_inst-$i-mutant
            mv mutant.log results/${tag[$t]}/null_inst-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ null analysis (Dyninst+decoding overhead)
    if [ "$do_nullanalysis" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --decoding-only ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== NULL ANALYSIS =="
            echo -e "\n== NULL ANALYSIS ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/null_analysis-$i-mutant
            mv mutant.log results/${tag[$t]}/null_analysis-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ instruction counts
    if [ "$do_cinst" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --count-inst ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== INST COUNT =="
            echo -e "\n== INST COUNT ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/c_inst-$i-mutant
            mv mutant.log results/${tag[$t]}/c_inst-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ cancellation detection
    if [ "$do_cancel" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --detect-cancel ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== CANCEL =="
            echo -e "\n== CANCEL ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/d_cancel-$i-mutant
            mv mutant.log results/${tag[$t]}/d_cancel-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ cancellation detection (w/ stack traces; adds a lot of overhead!)
    if [ "$do_cancelstwalk" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --detect-cancel -C \"enable_stwalk=yes\" ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== CANCEL W/ STWALK =="
            echo -e "\n== CANCEL W/ STWALK ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/d_cancel_stwalk-$i-mutant
            mv mutant.log results/${tag[$t]}/d_cancel_stwalk-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ null shadow value analysis (Dyninst+decoding+basic shadow processing overhead)
    if [ "$do_nullshadow" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --shadow-null ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== NULL SHADOW ANALYSIS =="
            echo -e "\n== NULL SHADOW ANALYSIS ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/sh_null-$i-mutant
            mv mutant.log results/${tag[$t]}/sh_null-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ arbitrary-precision shadow values
    if [ "$do_arprec" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --shadow-arprec ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== ARPREC SHADOW =="
            echo -e "\n== ARPREC SHADOW ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/sh_arprec-$i-mutant
            mv mutant.log results/${tag[$t]}/sh_arprec-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ quad-precision shadow values
    if [ "$do_quad" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --shadow-quad ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== QUAD SHADOW =="
            echo -e "\n== QUAD SHADOW ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/sh_quad-$i-mutant
            mv mutant.log results/${tag[$t]}/sh_quad-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ single-precision shadow values
    if [ "$do_single" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --shadow-single ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== SINGLE SHADOW =="
            echo -e "\n== SINGLE SHADOW ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/sh_single-$i-mutant
            mv mutant.log results/${tag[$t]}/sh_single-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ null pointer value analysis (Dyninst+decoding+basic shadow processing overhead)
    if [ "$do_nullpointer" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --pointer-null ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== NULL POINTER ANALYSIS =="
            echo -e "\n== NULL POINTER ANALYSIS ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/ptr_null-$i-mutant
            mv mutant.log results/${tag[$t]}/ptr_null-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ quad-precision shadow values
    if [ "$do_ptrquad" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --pointer-quad ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== QUAD POINTER =="
            echo -e "\n== QUAD POINTER ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/ptr_quad-$i-mutant
            mv mutant.log results/${tag[$t]}/ptr_quad-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # {{{ single-precision shadow values
    if [ "$do_ptrsingle" == yes ]; then
        rm -f lib*
        make -s &>/dev/null
        eval "./fpinst $fprofopts -i --pointer-single ${config[$t]} ${target[$t]}" &>/dev/null
        for i in $(seq $ntrials)
        do
            echo -e "\n== SINGLE POINTER =="
            echo -e "\n== SINGLE POINTER ==" >&2
            if [ "${hasinput[$t]}" == yes ]; then
                time ./mutant ${params[$t]} <${input[$t]}
            else
                time ./mutant ${params[$t]}
            fi
            grep -o "Full analysis: .* instruction(s) handled" mutant.log >&2
            grep -o "Optimized analysis: .* instruction(s) handled" mutant.log >&2
            mv mutant results/${tag[$t]}/ptr_single-$i-mutant
            mv mutant.log results/${tag[$t]}/ptr_single-$i.log
        done
        rm -f lib*
    fi
    # }}}

    # produce nice output table of performance data
    #ruby format_trials.rb out ${insts[$t]}
    ruby format_trials.rb out 1

    # save results to a subdirectory
    mkdir -p results/${tag[$t]}
    #ruby format_trials.rb out ${insts[$t]} >results/${tag[$t]}/results.txt
    ruby format_trials.rb out 1 >results/${tag[$t]}/results.txt
    mv out results/${tag[$t]}/

done

