commit 0cc80bd7a37ad65f46f07979e1f152f7e984d364
Author: Mike Lam <lam@cs.umd.edu>
Date:   Tue Nov 29 12:04:05 2011 -0500

    Return SPRs in BPatch_addressSpace::getRegisters()

diff --git a/dyninstAPI/h/BPatch_addressSpace.h b/dyninstAPI/h/BPatch_addressSpace.h
index 00e92c6..7ffd41e 100644
--- a/dyninstAPI/h/BPatch_addressSpace.h
+++ b/dyninstAPI/h/BPatch_addressSpace.h
@@ -408,8 +408,8 @@ class BPATCH_DLL_EXPORT BPatch_addressSpace : public BPatch_eventLock {
                BPatch_variableExpr *, createVariable, 
                (std::string name, Dyninst::Address addr, BPatch_type *type = NULL));
 
-    API_EXPORT(Int, (regs),
-               bool, getRegisters, (std::vector<BPatch_register> &regs));
+    API_EXPORT(Int, (regs, includeSPRs),
+               bool, getRegisters, (std::vector<BPatch_register> &regs, bool includeSPRs = false));
 
     API_EXPORT(Int, (regName, reg),
     bool, createRegister_NP, (std::string regName, BPatch_register &reg)); 
diff --git a/dyninstAPI/src/BPatch_addressSpace.C b/dyninstAPI/src/BPatch_addressSpace.C
index 3229cd0..4c80aeb 100644
--- a/dyninstAPI/src/BPatch_addressSpace.C
+++ b/dyninstAPI/src/BPatch_addressSpace.C
@@ -998,12 +998,7 @@ bool BPatch_addressSpace::isStaticExecutableInt() {
 #include "registerSpace.h"
 
 #if defined(cap_registers)
-bool BPatch_addressSpace::getRegistersInt(std::vector<BPatch_register> &regs) {
-   if (registers_.size()) {
-       regs = registers_;
-       return true;
-   }
-
+bool BPatch_addressSpace::getRegistersInt(std::vector<BPatch_register> &regs, bool includeSPRs) {
    std::vector<AddressSpace *> as;
 
    getAS(as);
@@ -1011,11 +1006,29 @@ bool BPatch_addressSpace::getRegistersInt(std::vector<BPatch_register> &regs) {
 
    registerSpace *rs = registerSpace::getRegisterSpace(as[0]);
 
+   unsigned rsize = rs->realRegs().size();
+   if (includeSPRs) {
+       rsize += rs->SPRs().size();
+   }
+   if (registers_.size() == rsize) {
+       // return cached vector if sizes match
+       regs = registers_;
+       return true;
+   }
+
+   registers_.clear();
    for (unsigned i = 0; i < rs->realRegs().size(); i++) {
        // Let's do just GPRs for now
        registerSlot *regslot = rs->realRegs()[i];
        registers_.push_back(BPatch_register(regslot->name, regslot->number));
    }
+   if (includeSPRs) {
+       for (unsigned i = 0; i < rs->SPRs().size(); i++) {
+           // include SPRs if desired
+           registerSlot *regslot = rs->SPRs()[i];
+           registers_.push_back(BPatch_register(regslot->name, regslot->number));
+       }
+   }
    regs = registers_;
    return true;
 }
